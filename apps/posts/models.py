from django.db import models

from utils.models import BaseModel


class PostType(BaseModel):
    description_en = None
    description_ru = None
    image = None
    value = models.CharField(
        max_length=256,
        verbose_name="–ó–Ω–∞—á–µ–Ω–∏–µ"
    )

    def __str__(self):
        return self.title_ru

    class Meta:
        verbose_name = "–¢–∏–ø –ø–æ—Å—Ç–∞"
        verbose_name_plural = "–¢–∏–ø—ã –ø–æ—Å—Ç–æ–≤"


class Post(BaseModel):
    post_type = models.ForeignKey(
        PostType,
        on_delete=models.CASCADE,
        related_name="post_type",
        verbose_name="post type"
    )

    beneficiaries = models.PositiveSmallIntegerField(
        verbose_name="beneficiaries english"
    )

    # russian version üëá
    duration_ru = models.CharField(
        max_length=256,
        verbose_name="duration russian"
    )
    location_ru = models.CharField(
        max_length=256,
        verbose_name="location russian"
    )

    participants_ru = models.CharField(
        max_length=256,
        verbose_name="participants russian"
    )

    #  english version üëá

    duration_en = models.CharField(
        max_length=256,
        verbose_name="duration english"
    )
    location_en = models.CharField(
        max_length=256,
        verbose_name="location english"
    )
    participants_en = models.CharField(
        max_length=256,
        verbose_name="participants english"
    )
    target_audience_ru = models.CharField(
        max_length=256,
        verbose_name="Target audience russian"
    )
    target_audience_en = models.CharField(
        max_length=256,
        verbose_name="Target audience english"
    )
    project_goals_ru = models.TextField(
        verbose_name="Project goals russian"
    )
    project_goals_en = models.TextField(
        verbose_name="Project goals english"
    )

    class Meta:
        verbose_name = '–ü–æ—Å—Ç'
        verbose_name_plural = "–ü–æ—Å—Ç—ã"
        ordering = ("-create_at",)

    def __str__(self):
        return f"{self.id}--{self.create_at}"


class PostSocial(models.Model):
    post = models.ForeignKey(
        Post,
        on_delete=models.CASCADE,
        related_name="post_socials"
    )

    class SocialTypeChoice(models.TextChoices):
        FACEBOOK = "facebook"
        INSTAGRAM = "instagram"
        YOUTUBE = "youtube"

    social = models.CharField(
        max_length=256,
        choices=SocialTypeChoice.choices,
        verbose_name="–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Å–µ—Ç—å"
    )
    link = models.URLField(
        verbose_name="—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é"
    )

    def __str__(self):
        return f"{self.id}"

    def save(self, *args, **kwargs):
        if PostSocial.objects.filter(social=self.social, post_id=self.post.id).count() < 1:
            return super().save(*args, **kwargs)
